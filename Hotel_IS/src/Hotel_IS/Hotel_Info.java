/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Hotel_IS;

import java.awt.Desktop;
import java.awt.HeadlessException;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author Sulav, Firdosh, Jay Ram, Madhu
 */
public class Hotel_Info extends javax.swing.JFrame {

    ArrayList<Integer> fee = new ArrayList<>();

    /**
     * Creates new form Hotel_Info
     */
    public Hotel_Info() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        categoryBG = new javax.swing.ButtonGroup();
        servicesBG = new javax.swing.ButtonGroup();
        CategoryCB = new javax.swing.JComboBox<>();
        SearchCategoryBTN = new javax.swing.JButton();
        searchfeeTF = new javax.swing.JTextField();
        SearchFeeBTN = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Table = new javax.swing.JTable();
        nameLBL = new javax.swing.JLabel();
        locationLBL = new javax.swing.JLabel();
        categoryLBL = new javax.swing.JLabel();
        feeLBL = new javax.swing.JLabel();
        servicesLBL = new javax.swing.JLabel();
        feeTF = new javax.swing.JTextField();
        nameTF = new javax.swing.JTextField();
        locationTF = new javax.swing.JTextField();
        spaCB = new javax.swing.JCheckBox();
        poolCB = new javax.swing.JCheckBox();
        barCB = new javax.swing.JCheckBox();
        massageCB = new javax.swing.JCheckBox();
        fivestarRB = new javax.swing.JRadioButton();
        fourstarRB = new javax.swing.JRadioButton();
        threestarRB = new javax.swing.JRadioButton();
        twostarRB = new javax.swing.JRadioButton();
        jPanel1 = new javax.swing.JPanel();
        addBTN = new javax.swing.JButton();
        clearBTN = new javax.swing.JButton();
        contactLBL = new javax.swing.JLabel();
        contactTF = new javax.swing.JTextField();
        infoLBL = new javax.swing.JLabel();
        ValidationLBL = new javax.swing.JLabel();
        tblclearBTN = new javax.swing.JButton();
        rowclearBTN = new javax.swing.JButton();
        contactValid = new javax.swing.JLabel();
        feeValid = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        fileM = new javax.swing.JMenu();
        openMI = new javax.swing.JMenuItem();
        saveMI = new javax.swing.JMenuItem();
        exitMI = new javax.swing.JMenuItem();
        helpM = new javax.swing.JMenu();
        helpMI = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Hotel IS");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N

        CategoryCB.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Five Star", "Four Star", "Three Star", "Two Star" }));

        SearchCategoryBTN.setText("Search By Category");
        SearchCategoryBTN.setActionCommand("");
        SearchCategoryBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchCategoryBTNActionPerformed(evt);
            }
        });

        searchfeeTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                searchfeeTFKeyPressed(evt);
            }
        });

        SearchFeeBTN.setText("Search by Fee");
        SearchFeeBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchFeeBTNActionPerformed(evt);
            }
        });

        Table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Location", "Contact", "Category", "Accomodation Fee", "Services"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        Table.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        Table.setShowGrid(false);
        jScrollPane1.setViewportView(Table);
        if (Table.getColumnModel().getColumnCount() > 0) {
            Table.getColumnModel().getColumn(0).setPreferredWidth(50);
            Table.getColumnModel().getColumn(1).setPreferredWidth(15);
            Table.getColumnModel().getColumn(2).setPreferredWidth(10);
            Table.getColumnModel().getColumn(3).setPreferredWidth(15);
            Table.getColumnModel().getColumn(4).setPreferredWidth(25);
            Table.getColumnModel().getColumn(5).setPreferredWidth(250);
        }

        nameLBL.setText("Name :");

        locationLBL.setText("Location :");

        categoryLBL.setText("Category :");

        feeLBL.setText("Accomodation Fee :");

        servicesLBL.setText("Services :");

        feeTF.setToolTipText("Enter the accomodation fee for one day");
        feeTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                feeTFKeyPressed(evt);
            }
        });

        nameTF.setToolTipText("Enter the name of the hotel");

        locationTF.setToolTipText("Enter the location of the hotel");

        spaCB.setText("Spa");

        poolCB.setText("Swimming Pool");

        barCB.setText("Bar and Restro");

        massageCB.setText("Massage Parlour");

        categoryBG.add(fivestarRB);
        fivestarRB.setText("Five Star");

        categoryBG.add(fourstarRB);
        fourstarRB.setText("Four Star");

        categoryBG.add(threestarRB);
        threestarRB.setText("Three Star");

        categoryBG.add(twostarRB);
        twostarRB.setText("Two Star");

        addBTN.setText("Add Details");
        addBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                addBTNActionPerformed(evt);
            }
        });

        clearBTN.setText("Clear");
        clearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearBTNActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(addBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 113, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(clearBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(addBTN, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(clearBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        contactLBL.setText("Contact :");

        contactTF.setToolTipText("Enter the contact details");
        contactTF.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                contactTFKeyPressed(evt);
            }
        });

        infoLBL.setFont(new java.awt.Font("Cambria", 0, 24)); // NOI18N
        infoLBL.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        infoLBL.setText("Hotel Information Form");
        infoLBL.setToolTipText("");

        ValidationLBL.setForeground(new java.awt.Color(255, 0, 51));

        tblclearBTN.setText("Clear Table");
        tblclearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tblclearBTNActionPerformed(evt);
            }
        });

        rowclearBTN.setText("Clear Row");
        rowclearBTN.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rowclearBTNActionPerformed(evt);
            }
        });

        contactValid.setForeground(new java.awt.Color(255, 0, 0));

        feeValid.setForeground(new java.awt.Color(255, 0, 0));

        fileM.setText("File");

        openMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        openMI.setText("Open");
        openMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                openMIActionPerformed(evt);
            }
        });
        fileM.add(openMI);

        saveMI.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        saveMI.setText("Save");
        saveMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveMIActionPerformed(evt);
            }
        });
        fileM.add(saveMI);

        exitMI.setText("Exit");
        exitMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                exitMIActionPerformed(evt);
            }
        });
        fileM.add(exitMI);

        jMenuBar1.add(fileM);

        helpM.setText("Help");

        helpMI.setText("Help");
        helpMI.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                helpMIActionPerformed(evt);
            }
        });
        helpM.add(helpMI);

        jMenuBar1.add(helpM);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(233, 737, Short.MAX_VALUE)
                                .addComponent(ValidationLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(CategoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, 188, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(SearchCategoryBTN)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(searchfeeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 173, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addComponent(SearchFeeBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(nameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                    .addComponent(locationLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(locationTF, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(feeLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(feeTF, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE)
                                    .addComponent(feeValid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 274, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(servicesLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(spaCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(poolCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(barCB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(massageCB, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(categoryLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(fivestarRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(fourstarRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(threestarRB)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(twostarRB))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(contactLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(contactValid, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(contactTF, javax.swing.GroupLayout.DEFAULT_SIZE, 204, Short.MAX_VALUE))))))
                .addGap(29, 29, 29))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(254, 254, 254)
                        .addComponent(tblclearBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(169, 169, 169)
                        .addComponent(rowclearBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(382, 382, 382)
                        .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(362, 362, 362)
                        .addComponent(infoLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 332, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(infoLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nameLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nameTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contactLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(contactTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(contactValid, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(locationLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(locationTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(categoryLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(fivestarRB)
                        .addComponent(fourstarRB)
                        .addComponent(threestarRB)
                        .addComponent(twostarRB)))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(feeLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(feeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(servicesLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(spaCB)
                    .addComponent(poolCB)
                    .addComponent(barCB)
                    .addComponent(massageCB))
                .addGap(3, 3, 3)
                .addComponent(feeValid, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchFeeBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(searchfeeTF, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(SearchCategoryBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(CategoryCB, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(4, 4, 4)
                .addComponent(ValidationLBL, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 259, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(tblclearBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rowclearBTN, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(12, Short.MAX_VALUE))
        );

        setBounds(0, 0, 1100, 789);
    }// </editor-fold>//GEN-END:initComponents

    private void SearchCategoryBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchCategoryBTNActionPerformed
        try{
            int b = 0;
        ArrayList<String> category = new ArrayList<>();
        //storing the comobo box data in string
        String cat = CategoryCB.getSelectedItem().toString();
        //Adding the table data in a arraylist
        do {
            String s = (String) Table.getValueAt(b, 3);
            if (s != null && s.length() != 0) {
                category.add(s);
            }
            b++;
        } while (b < Table.getRowCount());

        String name = "";
        int count = 0;
        //Searching for the selected item of combobox in the arraylist
        for (int i = 0; i < category.size(); i++) {
            if (cat.equals((String) Table.getValueAt(i, 3))) {
                if (count == 0) {
                    name = name + Table.getValueAt(i, 0);
                } else {
                    name = name + ", " + Table.getValueAt(i, 0);
                }
                count++;
            }

        }
        //Using dialog boxes to show the search result
        switch (count) {
            case 0:
                JOptionPane.showMessageDialog(this, "Search not found", "Information", JOptionPane.INFORMATION_MESSAGE);
                break;
            case 1:
                JOptionPane.showMessageDialog(this, "The name of hotel under the category " + CategoryCB.getSelectedItem() + " is " + name, "Information", JOptionPane.INFORMATION_MESSAGE);
                break;
            default:
                JOptionPane.showMessageDialog(this, "The name of hotel under the category " + CategoryCB.getSelectedItem() + " are " + name, "Information", JOptionPane.INFORMATION_MESSAGE);
                break;
        }
        }catch(ArrayIndexOutOfBoundsException e){
            JOptionPane.showMessageDialog(this, "Table is empty!!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }
        
    }//GEN-LAST:event_SearchCategoryBTNActionPerformed

    private void saveMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveMIActionPerformed
        //Saving file using tye file chooser
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        int reply = chooser.showSaveDialog(null);
        if (reply == JFileChooser.APPROVE_OPTION) {
            File savefile = chooser.getSelectedFile();
            //Adding the table data in the file
            try {
                FileWriter fw = new FileWriter(savefile);
                BufferedWriter bw = new BufferedWriter(fw);
                for (int i = 0; i < Table.getRowCount(); i++) {
                    for (int j = 0; j < Table.getColumnCount(); j++) {
                        bw.write((String) Table.getValueAt(i, j) + ",");
                    }
                    bw.newLine();
                }
                bw.close();
                fw.close();
                JOptionPane.showMessageDialog(this, "File saved successfully", "Information", JOptionPane.INFORMATION_MESSAGE);
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "ERROR", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_saveMIActionPerformed

    private void addBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_addBTNActionPerformed
        //Using try catch to resolve error
        try {
            //Storing the textfield and check box details in String data type
            String Name = nameTF.getText();
            String Location = locationTF.getText();
            String Contact = contactTF.getText();
            fivestarRB.setActionCommand("Five Star");
            fourstarRB.setActionCommand("Four Star");
            threestarRB.setActionCommand("Three Star");
            twostarRB.setActionCommand("Two Star");
            String Category = categoryBG.getSelection().getActionCommand();
            String Fee = feeTF.getText();
            String Services = "";
            if (spaCB.isSelected()) {
                Services += spaCB.getText() + " ";
            }
            if (poolCB.isSelected()) {
                Services += poolCB.getText() + " ";
            }
            if (barCB.isSelected()) {
                Services += barCB.getText() + " ";
            }
            if (massageCB.isSelected()) {
                Services += massageCB.getText() + " ";
            }

            try {
                Boolean exists = false;
                for (int i = 0; i < Table.getRowCount(); i++) {
                    if (Table.getValueAt(i, 0).equals(Name)) {
                        exists = true;
                        JOptionPane.showMessageDialog(this, "The hotel already exists.", "ERROR", JOptionPane.ERROR_MESSAGE);
                    }
                }
                if (exists == false) {
                    int a = Integer.parseInt(Contact);
                    int b = Integer.parseInt(Fee);
                    DefaultTableModel model = (DefaultTableModel) Table.getModel();
                    model.addRow(new Object[]{null, null, null, null, null, null});
                    //Creating a array and storing the variables in it
                    String[] value = {Name, Location, Contact, Category, Fee, Services};
                    //Adding an empty row in the table
                    int rows = Table.getRowCount();
                    int columns = Table.getColumnCount();
                    int index = 0;
                    //adding the details in the table
                    do {
                        String s = (String) Table.getValueAt(index, 0);
                        if (s != null && s.length() != 0) {
                            index++;
                        } else {
                            for (int i = 0; i < columns; i++) {
                                Table.setValueAt(value[i], index, i);
                            }
                            break;
                        }
                    } while (index < rows);
                }

            } catch (NumberFormatException e) {
                JOptionPane.showMessageDialog(this, "Enter the appropriate data in textfields.", "ERROR", JOptionPane.ERROR_MESSAGE);
            }
        } catch (NullPointerException e) {
            JOptionPane.showMessageDialog(this, "Enter the values first!!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }//GEN-LAST:event_addBTNActionPerformed

    private void exitMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_exitMIActionPerformed
        //exit function
        System.exit(0);
    }//GEN-LAST:event_exitMIActionPerformed

    private void SearchFeeBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchFeeBTNActionPerformed
        //Checking for null value in textfield
        if (searchfeeTF.getText().equals("")) {
            JOptionPane.showMessageDialog(rootPane, "Please enter your search key");
        } else {
            try {
                //Using the sortforfee method
                String name = "";
                sortforfee();
                //Storing the textfield data in  variable
                int key = Integer.parseInt(searchfeeTF.getText());

                int low = 0;
                int high = fee.size();
                //Using the feesearchlist method
                int found = feesearchList(low, high, key);
                if (found == -1) {
                    JOptionPane.showMessageDialog(this, "Search not found!!", "ERROR", JOptionPane.ERROR_MESSAGE);
                } else {
                    //Searching for the target value
                    for (int i = 0; i < Table.getRowCount(); i++) {
                        if (found == Integer.parseInt((String) Table.getValueAt(i, 4))) {
                            name = name + Table.getValueAt(i, 0);
                            Boolean isValue = true;
                            JOptionPane.showMessageDialog(this, "The hotel available for given accomodation fee is " + name, "Information", JOptionPane.INFORMATION_MESSAGE);
                            if (isValue == true) {
                                break;
                            }
                        }
                    }
                }
            } catch (ArrayIndexOutOfBoundsException e) {
                JOptionPane.showMessageDialog(this, "Table is empty!!!", "ERROR MESSAGE", JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_SearchFeeBTNActionPerformed

    private void openMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_openMIActionPerformed
        //Using file chooser
        JFileChooser chooser = new JFileChooser();
        chooser.setCurrentDirectory(new File("."));
        int reply = chooser.showOpenDialog(null);
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        if (reply == JFileChooser.APPROVE_OPTION) {
            //Selecting a file
            File file = new File(chooser.getSelectedFile().getAbsolutePath());
            try {
                //Using buffered reader to read file
                BufferedReader br = new BufferedReader(new FileReader(file));
                Object[] row = br.lines().toArray();
                //Adding the table data in the file
                for (int i = 0; i < row.length; i++) {
                    String line = row[i].toString().trim();
                    String[] data = line.split(",");
                    model.addRow(data);
                }
                JOptionPane.showMessageDialog(this, "File Opened Sucessfully", "Information", JOptionPane.INFORMATION_MESSAGE);
            } catch (FileNotFoundException ex) {
                JOptionPane.showMessageDialog(this, "ERROR!!");
            }
        }
    }//GEN-LAST:event_openMIActionPerformed

    private void helpMIActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_helpMIActionPerformed
        //Opening a pdf file in the project folder
        try {
            if (Desktop.isDesktopSupported()) {
                File help = new File("PDF/Help_MI.pdf");
                Desktop.getDesktop().open(help);
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(this, "File not found!!!", "ERROR", JOptionPane.ERROR_MESSAGE);
    }//GEN-LAST:event_helpMIActionPerformed
    }
    private void tblclearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tblclearBTNActionPerformed
        //Clearing all the table data
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        if (model.getRowCount() == 0) {
            JOptionPane.showMessageDialog(this, "The table is empty!", "ERROR", JOptionPane.ERROR_MESSAGE);
        } else {
            model.setRowCount(0);
            JOptionPane.showMessageDialog(null, "Deleted successfully!");
        }
    }//GEN-LAST:event_tblclearBTNActionPerformed

    private void rowclearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rowclearBTNActionPerformed
        //Clearing the selected row data
        DefaultTableModel model = (DefaultTableModel) Table.getModel();
        if (Table.getSelectedRow() != -1) {
            // remove the selected row from the table model
            model.removeRow(Table.getSelectedRow());
            JOptionPane.showMessageDialog(null, "Deleted successfully");
        }
    }//GEN-LAST:event_rowclearBTNActionPerformed

    private void clearBTNActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearBTNActionPerformed
        //Clearing the form data
        nameTF.setText("");
        locationTF.setText("");
        contactTF.setText("");
        feeTF.setText("");
        categoryBG.clearSelection();
        spaCB.setSelected(false);
        barCB.setSelected(false);
        poolCB.setSelected(false);
        massageCB.setSelected(false);
    }//GEN-LAST:event_clearBTNActionPerformed

    private void searchfeeTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_searchfeeTFKeyPressed
        //works when the searchfeeTF is pressed
        //shows a text when wrong input is given
        try {
            int i = Integer.parseInt(searchfeeTF.getText());
            ValidationLBL.setText("");
        } catch (NumberFormatException e) {
            ValidationLBL.setText("Input Numeric Values Only!!");
        }
    }//GEN-LAST:event_searchfeeTFKeyPressed

    private void contactTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_contactTFKeyPressed
        //works when the searchfeeTF is pressed
        //shows a text when wrong input is given
        try {
            int i = Integer.parseInt(contactTF.getText());
            contactValid.setText("");
        } catch (NumberFormatException e) {
            contactValid.setText("Input Numeric Values Only!!");
        }
    }//GEN-LAST:event_contactTFKeyPressed

    private void feeTFKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_feeTFKeyPressed
        //works when the searchfeeTF is pressed
        //shows a text when wrong input is given
        try {
            int i = Integer.parseInt(feeTF.getText());
            feeValid.setText("");
        } catch (NumberFormatException e) {
            feeValid.setText("Input Numeric Values Only!!");
        }


    }//GEN-LAST:event_feeTFKeyPressed
    public void sortforfee() {
        //Sorting fee data using bubble sort
        try {
            int a = 0;
            int temp;
            fee.clear();
            //Adding details in fee arraylist
            do {
                String s = (String) Table.getValueAt(a, 4);
                if (s != null && s.length() != 0) {
                    fee.add(Integer.parseInt(s));
                }
                a++;
            } while (a < Table.getRowCount());
            //Replacing the data if necessary
            for (int i = 0; i < fee.size(); i++) {
                for (int j = i + 1; j < fee.size(); j++) {
                    if (fee.get(j) < fee.get(j - 1)) {
                        temp = fee.get(j);
                        fee.set(j, fee.get(j - 1));
                        fee.set(j - 1, temp);
                    }
                }
            }
        } catch (ArrayIndexOutOfBoundsException e) {
            JOptionPane.showMessageDialog(this, "Table is empty!!", "ERROR", JOptionPane.ERROR_MESSAGE);
        }

    }

    public int feesearchList(int low, int high, int key) {
        //using binary search to search for the target value
        if (low <= high) {
            int mid = (low + high) / 2;
            //Returning value at mid if key and mid value is same
            if (this.fee.get(mid) == key) {
                return this.fee.get(mid);
                //Repeating the process if mid is greater than key
            } else if (this.fee.get(mid) > key) {
                return feesearchList(low, mid - 1, key);
                //Repeating the process if mid is less than key    
            } else if (this.fee.get(mid) < key) {
                return feesearchList(mid + 1, high, key);
            }
        }
        return -1;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Hotel_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Hotel_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Hotel_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Hotel_Info.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Hotel_Info().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JComboBox<String> CategoryCB;
    private javax.swing.JButton SearchCategoryBTN;
    private javax.swing.JButton SearchFeeBTN;
    private javax.swing.JTable Table;
    private javax.swing.JLabel ValidationLBL;
    private javax.swing.JButton addBTN;
    private javax.swing.JCheckBox barCB;
    private javax.swing.ButtonGroup categoryBG;
    private javax.swing.JLabel categoryLBL;
    private javax.swing.JButton clearBTN;
    private javax.swing.JLabel contactLBL;
    private javax.swing.JTextField contactTF;
    private javax.swing.JLabel contactValid;
    private javax.swing.JMenuItem exitMI;
    private javax.swing.JLabel feeLBL;
    private javax.swing.JTextField feeTF;
    private javax.swing.JLabel feeValid;
    private javax.swing.JMenu fileM;
    private javax.swing.JRadioButton fivestarRB;
    private javax.swing.JRadioButton fourstarRB;
    private javax.swing.JMenu helpM;
    private javax.swing.JMenuItem helpMI;
    private javax.swing.JLabel infoLBL;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel locationLBL;
    private javax.swing.JTextField locationTF;
    private javax.swing.JCheckBox massageCB;
    private javax.swing.JLabel nameLBL;
    private javax.swing.JTextField nameTF;
    private javax.swing.JMenuItem openMI;
    private javax.swing.JCheckBox poolCB;
    private javax.swing.JButton rowclearBTN;
    private javax.swing.JMenuItem saveMI;
    private javax.swing.JTextField searchfeeTF;
    private javax.swing.ButtonGroup servicesBG;
    private javax.swing.JLabel servicesLBL;
    private javax.swing.JCheckBox spaCB;
    private javax.swing.JButton tblclearBTN;
    private javax.swing.JRadioButton threestarRB;
    private javax.swing.JRadioButton twostarRB;
    // End of variables declaration//GEN-END:variables

}
